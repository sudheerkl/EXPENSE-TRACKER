
"""
Expense Tracker - A simple expense tracking application
Requirements: Python 3.6+ with csv, datetime, and os modules (built-in)
Optional: matplotlib for charts (pip install matplotlib)
"""

import csv
import os
from datetime import datetime
from collections import defaultdict

class ExpenseTracker:
    def __init__(self, filename="expenses.csv"):
        self.filename = filename
        self.expenses = []
        self.load_expenses()
    
    def load_expenses(self):
        """Load expenses from CSV file"""
        if os.path.exists(self.filename):
            try:
                with open(self.filename, 'r', newline='', encoding='utf-8') as file:
                    reader = csv.DictReader(file)
                    self.expenses = list(reader)
                    # Convert amount to float for calculations
                    for expense in self.expenses:
                        expense['amount'] = float(expense['amount'])
                print(f"‚úÖ Loaded {len(self.expenses)} expenses from {self.filename}")
            except Exception as e:
                print(f"‚ùå Error loading expenses: {e}")
                self.expenses = []
        else:
            print(f"üìÅ No existing file found. Starting fresh!")
    
    def save_expenses(self):
        """Save expenses to CSV file"""
        try:
            with open(self.filename, 'w', newline='', encoding='utf-8') as file:
                if self.expenses:
                    fieldnames = ['date', 'category', 'description', 'amount']
                    writer = csv.DictWriter(file, fieldnames=fieldnames)
                    writer.writeheader()
                    writer.writerows(self.expenses)
            print(f"üíæ Expenses saved to {self.filename}")
        except Exception as e:
            print(f"‚ùå Error saving expenses: {e}")
    
    def add_expense(self):
        """Add a new expense"""
        print("\n=== Add New Expense ===")
        
        # Get date (default to today)
        date_input = input("Enter date (YYYY-MM-DD) or press Enter for today: ").strip()
        if not date_input:
            date = datetime.now().strftime("%Y-%m-%d")
        else:
            try:
                # Validate date format
                datetime.strptime(date_input, "%Y-%m-%d")
                date = date_input
            except ValueError:
                print("‚ùå Invalid date format. Using today's date.")
                date = datetime.now().strftime("%Y-%m-%d")
        
        # Get category
        category = input("Enter category (e.g., Food, Travel, Shopping): ").strip().title()
        if not category:
            category = "Miscellaneous"
        
        # Get description
        description = input("Enter description: ").strip()
        if not description:
            description = "No description"
        
        # Get amount
        while True:
            try:
                amount = float(input("Enter amount (‚Çπ): ").strip())
                if amount <= 0:
                    print("‚ùå Amount must be positive. Please try again.")
                    continue
                break
            except ValueError:
                print("‚ùå Invalid amount. Please enter a number.")
        
        # Add expense
        expense = {
            'date': date,
            'category': category,
            'description': description,
            'amount': amount
        }
        
        self.expenses.append(expense)
        self.save_expenses()
        print(f"‚úÖ Expense added successfully! ‚Çπ{amount:.2f} for {category}")
    
    def view_expenses(self):
        """View all expenses with optional filtering"""
        if not self.expenses:
            print("\nüìã No expenses found. Add some expenses first!")
            return
        
        print(f"\n=== All Expenses ({len(self.expenses)} total) ===")
        
        # Ask for filter option
        print("\nFilter options:")
        print("1. Show all expenses")
        print("2. Filter by category")
        print("3. Filter by date range")
        
        choice = input("Choose filter (1-3): ").strip()
        
        filtered_expenses = self.expenses.copy()
        
        if choice == "2":
            # Filter by category
            categories = set(expense['category'] for expense in self.expenses)
            print(f"Available categories: {', '.join(sorted(categories))}")
            filter_category = input("Enter category to filter: ").strip().title()
            filtered_expenses = [e for e in self.expenses if e['category'] == filter_category]
            
        elif choice == "3":
            # Filter by date range
            start_date = input("Enter start date (YYYY-MM-DD): ").strip()
            end_date = input("Enter end date (YYYY-MM-DD): ").strip()
            try:
                filtered_expenses = [
                    e for e in self.expenses 
                    if start_date <= e['date'] <= end_date
                ]
            except:
                print("‚ùå Invalid date format. Showing all expenses.")
        
        if not filtered_expenses:
            print("üìã No expenses match your filter criteria.")
            return
        
        # Display expenses
        print(f"\n{'Date':<12} {'Category':<15} {'Description':<25} {'Amount':<10}")
        print("-" * 70)
        
        total = 0
        for expense in sorted(filtered_expenses, key=lambda x: x['date'], reverse=True):
            print(f"{expense['date']:<12} {expense['category']:<15} {expense['description'][:25]:<25} ‚Çπ{expense['amount']:<9.2f}")
            total += expense['amount']
        
        print("-" * 70)
        print(f"{'Total:':<52} ‚Çπ{total:.2f}")
    
    def expense_summary(self):
        """Show expense summary and statistics"""
        if not self.expenses:
            print("\nüìä No expenses to summarize. Add some expenses first!")
            return
        
        print("\n=== Expense Summary ===")
        
        # Calculate totals
        total_amount = sum(expense['amount'] for expense in self.expenses)
        total_count = len(self.expenses)
        
        print(f"üí∞ Total Expenses: ‚Çπ{total_amount:.2f}")
        print(f"üìù Total Transactions: {total_count}")
        print(f"üìä Average per Transaction: ‚Çπ{total_amount/total_count:.2f}")
        
        # Category-wise breakdown
        category_totals = defaultdict(float)
        category_counts = defaultdict(int)
        
        for expense in self.expenses:
            category_totals[expense['category']] += expense['amount']
            category_counts[expense['category']] += 1
        
        print(f"\nüìà Category-wise Breakdown:")
        print(f"{'Category':<15} {'Amount':<12} {'Count':<8} {'Percentage':<12}")
        print("-" * 50)
        
        for category in sorted(category_totals.keys()):
            amount = category_totals[category]
            count = category_counts[category]
            percentage = (amount / total_amount) * 100
            print(f"{category:<15} ‚Çπ{amount:<11.2f} {count:<8} {percentage:<11.1f}%")
        
        # Monthly breakdown (if expenses span multiple months)
        monthly_totals = defaultdict(float)
        for expense in self.expenses:
            month_key = expense['date'][:7]  # YYYY-MM
            monthly_totals[month_key] += expense['amount']
        
        if len(monthly_totals) > 1:
            print(f"\nüìÖ Monthly Breakdown:")
            print(f"{'Month':<10} {'Amount':<12}")
            print("-" * 25)
            for month in sorted(monthly_totals.keys()):
                print(f"{month:<10} ‚Çπ{monthly_totals[month]:<11.2f}")
        
        # Top categories
        top_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)[:3]
        print(f"\nüèÜ Top 3 Spending Categories:")
        for i, (category, amount) in enumerate(top_categories, 1):
            print(f"{i}. {category}: ‚Çπ{amount:.2f}")
    
    def export_data(self):
        """Export data to a new CSV file"""
        if not self.expenses:
            print("\nüìã No expenses to export.")
            return
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_filename = f"expenses_export_{timestamp}.csv"
        
        try:
            with open(export_filename, 'w', newline='', encoding='utf-8') as file:
                fieldnames = ['date', 'category', 'description', 'amount']
                writer = csv.DictWriter(file, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(self.expenses)
            print(f"‚úÖ Data exported to {export_filename}")
        except Exception as e:
            print(f"‚ùå Error exporting data: {e}")
    
    def show_chart(self):
        """Show expense chart using matplotlib (optional)"""
        try:
            import matplotlib.pyplot as plt
        except ImportError:
            print("\nüìä Matplotlib not installed. Install with: pip install matplotlib")
            return
        
        if not self.expenses:
            print("\nüìä No expenses to chart.")
            return
        
        # Category-wise pie chart
        category_totals = defaultdict(float)
        for expense in self.expenses:
            category_totals[expense['category']] += expense['amount']
        
        categories = list(category_totals.keys())
        amounts = list(category_totals.values())
        
        plt.figure(figsize=(10, 8))
        plt.pie(amounts, labels=categories, autopct='%1.1f%%', startangle=90)
        plt.title('Expense Distribution by Category')
        plt.axis('equal')
        plt.show()
        
        print("üìä Chart displayed!")
    
    def run(self):
        """Main application loop"""
        print("üöÄ Welcome to Expense Tracker!")
        print(f"üìÅ Data file: {self.filename}")
        
        while True:
            print("\n" + "="*40)
            print("         EXPENSE TRACKER MENU")
            print("="*40)
            print("1. üí∞ Add Expense")
            print("2. üìã View Expenses")
            print("3. üìä Expense Summary")
            print("4. üíæ Export Data")
            print("5. üìà Show Chart (requires matplotlib)")
            print("6. üö™ Exit")
            print("="*40)
            
            choice = input("Choose an option (1-6): ").strip()
            
            if choice == "1":
                self.add_expense()
            elif choice == "2":
                self.view_expenses()
            elif choice == "3":
                self.expense_summary()
            elif choice == "4":
                self.export_data()
            elif choice == "5":
                self.show_chart()
            elif choice == "6":
                print("\nüëã Thank you for using Expense Tracker!")
                print("üíæ All data has been saved automatically.")
                break
            else:
                print("‚ùå Invalid choice. Please select 1-6.")

def main():
    """Main function to run the expense tracker"""
    tracker = ExpenseTracker()
    try:
        tracker.run()
    except KeyboardInterrupt:
        print("\n\nüëã Goodbye! Data saved automatically.")
    except Exception as e:
        print(f"\n‚ùå An error occurred: {e}")
        print("üíæ Your data should still be saved in expenses.csv")

if __name__ == "__main__":
    main()
